#!/usr/bin/env ruby

# ==============================================================================
# John Kerl
# http://johnkerl.org
# October 2019
# ==============================================================================

require 'date'
require 'getoptlong'
require 'net/ping' # sudo gem install net-ping

$us = File.basename $0
$stdout.sync = true

# ----------------------------------------------------------------
textdefault="\033[0m"
fg_red="\033[31;01m"
fg_green="\033[32;01m"
fg_yellow="\033[33;01m"
fg_white="\033[37;01m"
bold="\033[1;01m"
underline="\033[4;01m"

bg_green="\033[42;01m"
bg_yellow="\033[43;01m"
bg_red="\033[41;01m"

# ================================================================
def usage(exit_code)
  stream = (exit_code == 0) ? $stdout : $stderr
  stream.puts("Usage: #{$us} [options] {dest}")
  stream.puts("Options:")
  stream.puts("-6  use script-internal IPv6")
  stream.puts("-x  Read ping lines from external ping, e.g. ping 8.8.8.8 | #{$us} -i")
  stream.puts("    in which case dest is not required.")
  stream.puts("-i {wait seconds} Time between pings")
  stream.puts("-h  Print this message")
  exit(exit_code)
end

# ----------------------------------------------------------------
use_ipv6 = false
parse_external_ping = false
wait_seconds = 1.0

opts = GetoptLong.new(
  [ '-6', GetoptLong::NO_ARGUMENT ],
  [ '-x', GetoptLong::NO_ARGUMENT ],
  [ '-i', GetoptLong::REQUIRED_ARGUMENT ],
  [ '-h', '--help', GetoptLong::NO_ARGUMENT ]
)

begin
  opts.each do |opt, arg|
    case opt
        when '-6'; use_ipv6 = true
        when '-x'; parse_external_ping = true
        when '-i'; wait_seconds = Float(arg)
        when '-h'; usage(0)
        when '--help'; usage(0)
     end
   end
rescue GetoptLong::Error
    usage(1)
end

if parse_external_ping == false && ARGV.length < 1
  $stderr.puts "#{$us}: need ping destination"
  exit 1
end

if (!parse_external_ping)
  dests = ARGV
end

# ----------------------------------------------------------------
pingers = dests.map{|dest| Net::Ping::External.new(dest)}

count = 0
ngood = 0
nbad = 0

dindex = 0
while true
  dest = dests[dindex]
  pinger = pingers[dindex]
  dindex = (dindex + 1) % pingers.length

  if parse_external_ping
    begin
      line = $stdin.readline
    rescue EOFError
      break
    end

    if line =~ /^PING.*data bytes$/
      next
    end

    rtt_ms = nil
    rtt = nil

    # 64 bytes from 172.19.248.2: icmp_seq=4 ttl=64 time=2.020 ms
    # 16 bytes from 7f54:deed:7191:c078:abcd::83:0, icmp_seq=1 hlim=111 time=2187.003 ms
    if line =~ /.*bytes from (.*). icmp_seq.*time=(.*) ms/
      #dest = $1
      rtt_ms = Float($2)
      rtt = rtt_ms / 1000.0
    end

  else

    rtt_t1 = Time::now.to_f
    if use_ipv6
      ok = pinger.ping6
    else
      ok = pinger.ping
    end
    rtt_t2 = Time::now.to_f
    if ok
      rtt = (rtt_t2 - rtt_t1) # convert to milliseconds
      rtt_ms = rtt / 1000.0
    else
      rtt = nil
      rtt_ms = nil
    end

  end

  count += 1

  if rtt.nil?
    rtt_ms = nil
    nbad += 1
    if pinger.exception.nil?
      bar = fg_red + 'timeout' + textdefault
    else
      bar = fg_red + pinger.exception + textdefault
    end
  else

    ngood += 1

    rtt_ms = (rtt * 1000).round.to_i

    template =
      '0' +
      '.........|' +
      '10-------|' +
      '100======|' +
      '1000#####'

    last = '|'
    if rtt_ms <= 0
      index = 0
    else
      index = (Math.log10(rtt_ms) * 10).to_i
      if index > 39
        index = 39
        last = '+'
      end
    end

    bg_color = bg_green
    if rtt_ms > 1000
      bg_color = bg_red
    elsif rtt_ms > 100
      bg_color = bg_yellow
    end

    # Ruby array[i..j] is inclusive for i and j
    bar = '[' + fg_white + bg_color + bold + underline + template[0..index] + textdefault + template[(index)+1..-1] + last + ']'

  end

  dest_fmt = "#{fg_yellow}#{dest}#{textdefault}"
  if rtt_ms.nil?
    rtt_ms_fmt = ''
  else
    rtt_ms_fmt = sprintf(" %6.1fms", rtt_ms)
  end
  printf("%-20s%s %s [%d/%d OK]\n", dest_fmt, rtt_ms_fmt, bar, ngood, count)

  if !parse_external_ping
    if rtt.nil?
      sleep(wait_seconds)
    elsif rtt < wait_seconds
      sleep(wait_seconds - rtt)
    end
  end
end
